{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/component/integration/integration-dialog.component.html","webpack:///./src/app/component/integration/integration-dialog.component.ts","webpack:///./src/app/component/integration/integration.component.html","webpack:///./src/app/component/integration/integration.component.ts","webpack:///./src/app/component/integration/integration.service.ts","webpack:///./src/app/component/profile/profile-dialog.component.html","webpack:///./src/app/component/profile/profile-dialog.component.ts","webpack:///./src/app/component/profile/profile.component.html","webpack:///./src/app/component/profile/profile.component.ts","webpack:///./src/app/component/subscription/subscription.component.html","webpack:///./src/app/component/subscription/subscription.component.ts","webpack:///./src/app/directive/edit.directive.ts","webpack:///./src/app/service/encryption.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<section>\\n  <h2>User Profile</h2>\\n  <app-profile></app-profile>\\n</section>\\n\\n<section>\\n  <h2> <mat-icon> timeline </mat-icon> Subscriptions </h2>\\n  <app-subscription></app-subscription>\\n</section>\\n\\n<section>\\n  <h2> <mat-icon> apps </mat-icon> Integration </h2>\\n  <app-integration></app-integration>\\n</section>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  title = 'Digital identity protocol';\n}\n","import {\n  MatInputModule,\n  MatButtonModule,\n  MatCheckboxModule,\n  MatCardModule,\n  MatGridListModule,\n  MatIconModule,\n  MatSlideToggleModule,\n  MatSliderModule,\n  MatFormFieldModule,\n  MatToolbarModule,\n  MatOptionModule,\n  MatDialogModule,\n  MatListModule,\n  MatSelectModule,\n  MatDialog\n} from '@angular/material';\n\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, InjectionToken } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport { ProfileComponent } from './component/profile/profile.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { EditDirective } from './directive/edit.directive';\nimport { SubscriptionComponent } from './component/subscription/subscription.component';\nimport { IntegrationComponent } from './component/integration/integration.component';\nimport { EncryptionService } from './service/encryption.service';\nimport { IntegrationService } from './component/integration/integration.service';\nimport { ProfileDialogComponent } from './component/profile/profile-dialog.component';\nimport { IntegrationDialogComponent } from './component/integration/integration-dialog.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ProfileComponent,\n    EditDirective,\n    ProfileDialogComponent,\n    SubscriptionComponent,\n    IntegrationDialogComponent,\n    IntegrationComponent,\n  ],\n  imports: [\n    MatListModule,\n    MatInputModule,\n    MatFormFieldModule,\n    MatSliderModule,\n    MatCardModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatOptionModule,\n    MatIconModule,\n    MatGridListModule,\n    MatSlideToggleModule,\n    MatSelectModule,\n    MatToolbarModule,\n    MatCheckboxModule,\n    BrowserAnimationsModule,\n    BrowserModule\n  ],\n  entryComponents: [ProfileDialogComponent, IntegrationDialogComponent],\n  providers: [EncryptionService, IntegrationService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"<h4> Available integrations </h4>\\n<div *ngFor=\\\"let integration of integrations | async\\\">\\n    {{integration.label}} <mat-slide-toggle (change)=\\\"setSelected(integration, $event.checked)\\\" [color]=\\\"primary\\\"></mat-slide-toggle>\\n</div>\\n\"","import { Component, Inject, OnDestroy } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material';\nimport { IntegrationService } from './integration.service';\n\n@Component({\n  templateUrl: 'integration-dialog.component.html'\n})\nexport class IntegrationDialogComponent {\n\n  public integrations;\n\n  constructor(\n    private integrationService: IntegrationService,\n    @Inject(MAT_DIALOG_DATA) public data: any) {\n\n    this.integrations = this.integrationService.intergrationsPossibilities;\n\n  }\n\n  public setSelected(thingy, stuff) {\n\n    if (stuff) {\n\n      this.integrationService.selectedServices.push(thingy);\n\n    } else {\n\n      this.integrationService.selectedServices\n        .forEach((otherstuff, index) => {\n\n          if (thingy && otherstuff && otherstuff.label === thingy.label) {\n\n            this.integrationService.selectedServices.splice(index, 1);\n\n          }\n\n        });\n    }\n\n  }\n\n}\n","module.exports = \"<mat-list role=\\\"list\\\">\\n  <mat-list-item *ngFor=\\\"let integration of chosenSelected\\\" role=\\\"listitem\\\">\\n      <img width=\\\"40\\\" style=\\\"padding-right: 20px\\\" [src]=\\\"integration.image\\\" alt=\\\"\\\">{{ integration.label }}\\n  </mat-list-item>\\n</mat-list>\\n\\n<button style=\\\"margin-top: 20px;\\\" mat-raised-button (click)=\\\"openDialog()\\\">+</button>\\n\"","import { Component, OnInit, Inject, AfterViewChecked, OnChanges } from '@angular/core';\nimport { IntegrationService } from './integration.service';\nimport { MAT_DIALOG_DATA, MatDialog } from '@angular/material';\nimport { IntegrationDialogComponent } from './integration-dialog.component';\n\n@Component({\n  selector: 'app-integration',\n  templateUrl: './integration.component.html'\n})\nexport class IntegrationComponent {\n\n  chosenSelected: any;\n\n  constructor(\n    private integrationService: IntegrationService,\n    public dialog: MatDialog) {\n\n    this.chosenSelected = this.integrationService.selectedServices;\n\n  }\n\n  openDialog(): void {\n    this.dialog.open(IntegrationDialogComponent, {\n      width: '400px',\n      data: { name: 'some name', animal: 'tiger' }\n    });\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, from, BehaviorSubject, Subject } from 'rxjs';\nimport { tap, map, scan } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IntegrationService {\n\n  public intergrationsPossibilities: Observable<any[]>;\n  selectedServices: any = [];\n\n  private integrations = [\n    {\n      service: 'post_nl',\n      label: 'Post NL',\n      image: 'https://seeklogo.com/images/P/postnl-logo-4DA6C08E55-seeklogo.com.png',\n      url: 'post nl url'\n    },\n    {\n      service: 'politie',\n      label: 'Politie',\n      image: 'https://seeklogo.com/images/P/Politie-logo-269952DA5A-seeklogo.com.png',\n      url: 'politie url'\n    },\n    {\n      service: 'kadester',\n      label: 'Kadester',\n      image: 'https://yt3.ggpht.com/a-/AJLlDp1aFV3E5R1dHen8Vph5n47AZc8Ujl5hglhF0Q=s900-mo-c-c0xffffffff-rj-k-no',\n      url: 'kadester url'\n    }\n  ];\n\n  constructor() {\n\n    this.intergrationsPossibilities = of(this.integrations);\n\n  }\n\n}\n","module.exports = \"<h3> Edit user information </h3>\\n<div class=\\\"example-container\\\">\\n\\n  <mat-form-field>\\n    <input matInput placeholder=\\\"Firstname\\\">\\n  </mat-form-field>\\n\\n  <mat-form-field>\\n    <input matInput placeholder=\\\"Lastname\\\">\\n  </mat-form-field>\\n\\n  <mat-form-field>\\n    <input matInput placeholder=\\\"Address\\\">\\n  </mat-form-field>\\n\\n  <mat-form-field>\\n    <input matInput placeholder=\\\"City\\\">\\n  </mat-form-field>\\n\\n  <button mat-button [mat-dialog-close]=\\\"true\\\">Yes</button>\\n\\n</div>\\n\"","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material';\n\n@Component({\n  templateUrl: 'profile-dialog.component.html'\n})\nexport class ProfileDialogComponent {\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: any) {\n  }\n\n}\n","module.exports = \"<div class=\\\"example-container\\\">\\n\\n  <img class=\\\"big-burd\\\" src=\\\"https://cdn.shopify.com/s/files/1/1291/5963/products/B00GSYZTUI.01-A2PJJEAW2GV0DY.MAIN._SS1000_SCRMZZZZZZZ_large.jpeg?v=1466143362\\\"\\n  />\\n\\n  <mat-list role=\\\"list\\\">\\n    <button mat-button (click)=\\\"openDialog()\\\">\\n      <mat-icon> edit </mat-icon>\\n    </button>\\n    <mat-list-item role=\\\"listitem\\\"> Firstname: Big </mat-list-item>\\n    <mat-list-item role=\\\"listitem\\\"> Lastname: Bird </mat-list-item>\\n    <mat-list-item role=\\\"listitem\\\"> Address: Sesame Street </mat-list-item>\\n    <mat-list-item role=\\\"listitem\\\"> City: Manhatten </mat-list-item>\\n  </mat-list>\\n\\n</div>\\n\"","import { Component } from '@angular/core';\nimport { EncryptionService } from '../../service/encryption.service';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\nimport { ProfileDialogComponent } from './profile-dialog.component';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html'\n})\nexport class ProfileComponent {\n\n  constructor(\n    private rsa: EncryptionService,\n    public dialog: MatDialog) {\n  }\n\n  openDialog(): void {\n    this.dialog.open(ProfileDialogComponent, {\n      width: '400px',\n      data: { name: 'some name', animal: 'tiger' }\n    });\n  }\n\n}\n","module.exports = \"<mat-list role=\\\"list\\\">\\n  <mat-list-item *ngFor=\\\"let integration of chosenSelected\\\" role=\\\"listitem\\\">\\n    <img width=\\\"40\\\" style=\\\"padding-right: 20px\\\" [src]=\\\"integration.image\\\" alt=\\\"\\\">{{ integration.label }}\\n  </mat-list-item>\\n</mat-list>\\n\"","import { Component } from '@angular/core';\nimport { IntegrationService } from '../integration/integration.service';\n\n@Component({\n  selector: 'app-subscription',\n  templateUrl: './subscription.component.html'\n})\nexport class SubscriptionComponent {\n\n  chosenSelected: any;\n\n  constructor(private integrationService: IntegrationService) {\n\n    this.chosenSelected = this.integrationService.selectedServices;\n\n  }\n\n}\n","import { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[appEdit]'\n})\nexport class EditDirective {\n\n  constructor() { }\n\n}\n","import { Injectable } from '@angular/core';\n\ndeclare const cryptico: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EncryptionService {\n\n  privateKey :string;\n\n  publicKey :string;\n\n  constructor() {\n\n    const somePassphrase = 'The Moon is a Harsh Mistress.';\n\n  }\n\n  restoreKeys(passphrase: string) {\n    this.privateKey = cryptico.generateRSAKey(passphrase, 512);\n    this.publicKey = cryptico.publicKeyString(this.privateKey);\n  }\n\n  getPublicKey() :string {\n    return this.publicKey\n  }\n\n  encrypt(data :string) {\n\n  }\n\n  decrypt(data :string) {\n\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}